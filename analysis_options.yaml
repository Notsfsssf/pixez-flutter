# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # - prefer_relative_imports
    - always_declare_return_types
    - avoid_bool_literals_in_conditional_expressions
    - avoid_escaping_inner_quotes
    - avoid_unnecessary_containers
    - lines_longer_than_80_chars
    - no_literal_bool_comparisons
    - package_api_docs
    - sized_box_for_whitespace
    - sized_box_shrink_expand
    - unawaited_futures
    - unnecessary_final
    - unnecessary_lambdas
    - void_checks

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
